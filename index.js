/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const port = process.env.PORT; //3000
const app = express();
const fs = require("fs");
// Middleware
app.use(express.json());

// List of todo items
let todoList = [
  {
    id: Date.now(),
    title: "Complete TodoApp",
    description: "Today I will complete todoapp and try to add frontend",
    completed: false,
  },
];

app.get("/todos", (req, res) => {
  res.status(200).json(todoList);
});

app.get("/todos/:id", (req, res) => {
  //todo get by id
  let myId = req.params.id;
  myId = parseInt(myId);
  let todoFound = false;

  for (let i = 0; i < todoList.length; i++) {
    if (todoList[i]["id"] === myId) {
      res.send(todoList[i]);
      todoFound = true;
      break;
    }
  }
  if (!todoFound) {
    res.status(404).json({ err: "Not found" });
  }
});

app.post("/todos", (req, res) => {
  // post or adding todos
  let newData = req.body;
  let idObj = { id: Date.now() };
  newData = Object.assign(idObj, newData);
  todoList.push(newData);
  res.status(201).send(newData);
});

app.put("/todos/:id", (req, res) => {
  // update todo maybe change the status from false to true
  let myId = parseInt(req.params.id);
  let status = false;

  for (let i = 0; i < todoList.length; i++) {
    if (todoList[i]["id"] === myId) {
      todoList[i]["completed"] = true;
      status = true;
      res.status(200).json(todoList[i]);
      break; // Exit the loop once the item is found and updated
    }
  }

  if (!status) {
    res.status(404).json({ err: "Unable to update" });
  }
});

app.delete("/todos/:id", (req, res) => {
  // deleting based on id
  let myId = parseInt(req.params.id);
  let status = false;
  for (let i = 0; i < todoList.length; i++) {
    if (todoList[i]["id"] === myId) {
      todoList.splice(i, 1);
      status = true;
      res.status(200).json(todoList);
      break; // Exit the loop once the item is found and updated
    }
  }
  if (!status) {
    res.status(404).json({ err: "Unable to delete" });
  }
});

app.use((req, res) => {
  res.status(404).send("Wrong route");
});

app.listen(port, () => {
  console.log(`Listening on port ${port}`);
});

module.exports = app;
